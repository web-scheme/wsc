;;* Unit tests for compilation from wrapped syntax to compiled modules.

use-modules
  (compile) #:select (compile-modules wasm-module:new)
  (parse env) #:select (make-env bind-syntax!)
  (parse macros) #:select (process-all-macros)
  (syntax wrap) #:select (wrapped-syntax:new wrapped-syntax? unwrap-all-syntax)
  (tools) #:select (Î» map-improper)
  (tap) #:select (before-each test run-tests assert assert-equal)

define test-env '()

before-each
  set!(test-env make-env('()))
  bind-syntax!(test-env 'define 'define)
  bind-syntax!(test-env 'define-syntax 'define-syntax)
  bind-syntax!(test-env 'define-library 'define-library)

;; TODO: Refactor this into a testing utility.
;* Return fake wrapped syntax objects for testing.
define test-wrap(datum)
  cond
    pair?(datum)    wrapped-syntax:new(
                      map-improper(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    vector?(datum)  wrapped-syntax:new(
                      vector-map(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    else            wrapped-syntax:new(
                      datum
                      test-env "nom de fichier" 4 20 '())

define-syntax test-compilation
  syntax-rules ()
    (test-compilation description (top-level-data ...) expected-libraries ...)
      test description
        assert-equal(
          compile-modules(map(test-wrap (quote (top-level-data ...))))
          (list expected-libraries ...))

test-compilation "A basic library"
  ((define-library (a b c 2 3 d)
     (export x foo)
     (import (scheme base))
     (begin
       (define x 5)
       (define (foo x) (* x x))
       (display "Bonjour, monde"))))
  wasm-module:new(
    #()
    #((import $*display "scheme base" "display" anyref)
      );(import $** "scheme base" "*" anyref))
    ; First function is the starting function.
    ;#((func
    ;    (return_call_indirect (param anyref) (result anyref)
    ;      (i32.const 0)))
    ;  (func (param $x anyref) (result anyref)
    ;    (return_call_indirect (param anyref) (param anyref) (result anyref)
    ;      (i32.const 1))))
    #()
    ;#((table anyref (elem $*display $**)))
    #()
    #()
    #((global $*x (export "x") anyref (i32.const 5))
      (global $*foo (export "foo") anyref (ref.func 1)))
    #()
    ;'(start 0)
    '()
    #()
    #())

run-tests()
