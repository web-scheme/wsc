;;* Unit tests for compilation from wrapped syntax to compiled modules.

use-modules
  (compile module) #:select (compile-modules core-module:new)
  (emit text) #:select (emit-text)
  (parse env) #:select (make-env bind-syntax!)
  (parse macros) #:select (process-all-macros)
  (parse wrap) #:select (wrapped-syntax:new wrapped-syntax? unwrap-all-syntax)
  (tools) #:select (Î» map-improper)
  (tap) #:select (before-each test run-tests assert assert-equal)

define test-env '()

before-each
  set!(test-env make-env('()))
  bind-syntax!(test-env 'define         'define)
  bind-syntax!(test-env 'define-library 'define-library)
  bind-syntax!(test-env 'define-syntax  'define-syntax)
  bind-syntax!(test-env 'display        'display)
  bind-syntax!(test-env 'import         'import)

;; TODO: Refactor this into a testing utility.
;* Return fake wrapped syntax objects for testing.
define test-wrap(datum)
  cond
    pair?(datum)    wrapped-syntax:new(
                      map-improper(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    vector?(datum)  wrapped-syntax:new(
                      vector-map(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    else            wrapped-syntax:new(
                      datum
                      test-env "nom de fichier" 4 20 '())

define-syntax test-compilation
  syntax-rules ()
    (test-compilation description (top-level-data ...) expected-libraries ...)
      test description
        assert-equal(
          map(emit-text
              compile-modules(map(test-wrap
                                  (quote (top-level-data ...)))))
          (list expected-libraries ...))

test-compilation "Hello world"
  ((import (scheme base))
   (display "Bonjour, monde"))
  '(component
     (import "scheme base" (component $c-scheme-base)))

run-tests()
