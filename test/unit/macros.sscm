;;* Unit tests for macro definition and expansion.

use-modules
  (parse env) #:select (make-env bind-syntax!)
  (parse macros) #:select (process-all-macros)
  (syntax wrap) #:select (wrapped-syntax:new wrapped-syntax? unwrap-all-syntax)
  (tools) #:select (Î» map-improper)
  (tap) #:select (before-each test run-tests assert assert-equal)

define test-env '()

before-each
  set!(test-env make-env('()))
  bind-syntax!(test-env 'define-syntax 'define-syntax)

;; TODO: Refactor this into a testing utility.
;* Return fake wrapped syntax objects for testing.
define test-wrap(datum)
  cond
    pair?(datum)    wrapped-syntax:new(
                      map-improper(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    vector?(datum)  wrapped-syntax:new(
                      vector-map(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    else            wrapped-syntax:new(
                      datum
                      test-env "nom de fichier" 4 20 '())

define-syntax test-macro
  syntax-rules ()
    (test-macro description macro-definition datum expected-expansion)
      test description
        process-all-macros(test-wrap((quote macro-definition)))
        define macro-expansion
          process-all-macros(test-wrap((quote datum)))
        assert(
          wrapped-syntax?(macro-expansion)
          "Expanded macro is not wrapped.")
        assert-equal(
          unwrap-all-syntax(macro-expansion)
          (quote expected-expansion))

test-macro "Basic macro"
  (define-syntax foo
    (syntax-rules ()
      ((foo)
       (bar))))
  (foo)
  (bar)

test-macro "Re-arranging fixed parameters"
  (define-syntax foo
    (syntax-rules ()
      ((foo u v x y z)
       (bar x u z u x))))
  (foo a b c d e)
  (bar c a e a c)

test-macro "Basic nested repetition"
  (define-syntax foo
    (syntax-rules ()
      ((foo ((x ...) ...) ...)
       (bar ((x ...) ...) ...))))
  (foo ((a b) (c d)) ((e f) (g h)))
  (bar ((a b) (c d)) ((e f) (g h)))

test-macro "Re-ordered repetition"
  (define-syntax foo
    (syntax-rules ()
      ((foo (x ...) (y ...) ...)
       (bar (y ...) ... (x ...)))))
  (foo (a b) (c d) (e f))
  (bar (c d) (e f) (a b))

test-macro "Repeated repetition"
  (define-syntax foo
    (syntax-rules ()
      ((foo ((x ...)))
       (bar x ... (x ...) x ... (x ...)))))
  (foo ((a b c d)))
  (bar a b c d (a b c d) a b c d (a b c d))

test-macro "Re-ordered, repeated repetition"
  (define-syntax foo
    (syntax-rules ()
      ((foo (x ...) (y ...))
       (bar y ... x ... x ... y ... x ...))))
  (foo (a b c) (d e f))
  (bar d e f a b c a b c d e f a b c)

run-tests()
