;;* Unit tests for macro definition and expansion.

use-modules
  (parse env) #:select (make-env bind-syntax!)
  (parse macros) #:select (process-all-macros)
  (parse reading) #:select (wrapped-syntax:new wrapped-syntax? unwrap-syntax)
  (tools) #:select (Î» map-improper)
  (tap) #:select (before-each test run-tests assert assert-equal)

define test-env '()

before-each
  set!(test-env make-env('()))
  bind-syntax!(test-env 'define-syntax 'define-syntax)

;; TODO: Refactor this into a testing utility.
;;* Return fake wrapped syntax objects for testing.
define test-wrap(datum)
  cond
    pair?(datum)    wrapped-syntax:new(
                      map-improper(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    vector?(datum)  wrapped-syntax:new(
                      vector-map(test-wrap datum)
                      test-env "nom de fichier" 4 20 '())
    else            wrapped-syntax:new(
                      datum
                      test-env "nom de fichier" 4 20 '())

define-syntax test-macro
  syntax-rules ()
    (test-macro description macro-definition datum expected-expansion)
      test description
        process-all-macros(test-wrap((quote macro-definition)))
        define macro-expansion
          process-all-macros(test-wrap((quote datum)))
        assert(
          wrapped-syntax?(macro-expansion)
          "Expanded macro is not wrapped.")
        assert-equal(
          unwrap-syntax(macro-expansion)
          (quote expected-expansion))

test-macro "A basic macro works."
  (define-syntax foo
    (syntax-rules ()
      ((foo obj ...)
       (bar obj ...))))
  (foo x y)
  (bar x y)

run-tests()
