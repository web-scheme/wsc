;;* General-purpose tools.
(define-module (tools)
  #:export (λ
            collect-list)
  #:use-module (scheme base)
)

;;* Ultimate flex.
define-syntax λ
  syntax-rules ()
    (λ parameters body ...)
      (lambda parameters body ...)

;;* Build a list from a generating function without boundlessly growing the call stack.
;;*
;;* Parameters:
;;*   next    Thunk to generate the elements.
;;*   stop?   Predicate that takes an element returned by `next`
;;*           and decides if collection is complete.
;;*           The element that passes `stop?` is not included in the results.
;;*
;;* Result:
;;*   List of elements.
define collect-list(next stop?)
  ;; Always append to `penultimate` so we can return the list in proper order.
  ;; Use a sentinel node in front of the head to simplify recursion.
  define sentinel cons('() '())
  define collect(penultimate element)
    if stop?(element)
      cdr(sentinel)
      let ((ultimate cons(element '())))
        set-cdr!(penultimate ultimate)
        collect(ultimate next())
  collect(sentinel next())
