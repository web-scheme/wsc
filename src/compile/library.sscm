;;* Compiler implementation for libraries.
(define-module (compile library)
  #:export (compile-define-library)
  #:use-module (scheme base)
  #:use-module ((srfi srfi-26) #:select (cut))
  #:use-module ((compile module) #:select (core-module
                                           new-core-module))
  #:use-module ((compile define) #:select (compile-define))
  #:use-module ((compile import) #:select (compile-import))
  #:use-module ((parse env) #:select (bind-syntax!
                                      lookup-variable-or-builtin
                                      make-env))
  #:use-module ((parse wrap) #:select (unwrap-all-syntax
                                       unwrap-symbol
                                       unwrap-library-name-part
                                       switch-s-expr
                                       wrapped-syntax.datum
                                       wrapped-syntax.env))
  #:use-module ((tools) #:select (λ builtin-syntax-list))
  #:use-module ((tools logging) #:select (log-error log-warning))
)

define compile-library-exports(export-specs module)
  'TODO

;; TODO: Re-use this for extra-librarial begin blocks?
;* Validate and compile a begin block.
;*
;* Parameters
;*   statements:   '[List] of [wrapped syntax](wrapped-syntax) objects
;*                  representing commands or definitions.'
;*   module:        Module being compiled.
;*   allow-define:  `#t` if definitions are still allowed,
;*                  `#f` if only commands are allowed.
;*
;* Result
;*   `#t` on success, or `#f` on failure.
define compile-library-begin(statements allow-define module)
  if null?(statements)
    #t
    switch-s-expr car(statements) head tail '()
      'define-syntax
        '()  ; Ignore because macros are already expanded.
      'define
        if null?(tail)
          log-error("Empty definition" car(statements))
          compile-define(tail module)
      'define-values
        compile-define-values(tail module)
      'define-record-type
        compile-define-record-type(tail module)
      'begin
        compile-library-begin(tail allow-define module)
      OTHER
        set! allow-define #f
        compile-start-invocation(head tail module)
      UNBOUND
        log-error("Unbound variable" car(wrapped-syntax.datum(car(statements))))
      ATOM
        log-warning("Dangling atom" car(statements))
      THEN
        compile-library-begin(cdr(statements) allow-define module)

define library-declaration-syntax
  builtin-syntax-list
    export
    import
    begin
    include
    include-ci
    include-library-declarations
    cond-expand

define compile-library-body(name body module)
  if null?(body)
    module
    switch-s-expr car(body) head tail library-declaration-syntax
      'export
        compile-library-exports(tail module)
      'import
        if null?(tail)
          log-error("Empty import declaration" car(body))
          compile-import(tail module)
      'begin
        compile-library-begin(tail #t module)
      'include
        'FOOT
      'include-ci
        'BAR
      'include-library-declarations
        'BAZ
      'cond-expand
        'RAZ
      OTHER
        log-error("Invalid library declaration" car(body))
      UNBOUND
        log-error("Unbound variable" car(wrapped-syntax.datum(car(body))))
      ATOM
        log-error("Invalid library declaration" car(body))
      THEN
        compile-library-body(name cdr(body) module)

;* Compile a library definition into a [WASM module](core-module).
;*
;* Parameters
;*   name-and-body:  List containing at least one item.
;*
;* Result
;*   Compiled [WASM module](core-module).
define compile-define-library(name-and-body)
  ;; [https://web-scheme.org/r7rs-small.pdf#subsection.7.1.7]
  define wrapped-name car(name-and-body)
  define name wrapped-syntax.datum(wrapped-name)
  call/cc
    λ (bail)
      if list?(name)
        compile-library-body(
          map((cut unwrap-library-name-part <> bail) name)
          cdr(name-and-body)
          new-core-module())
        bail(log-error("Library name must be a list" wrapped-name))
