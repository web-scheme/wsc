;;* Import set parsing and library lookup.
(define-module (compile import)
  #:export (lookup-imports)
  #:use-module (scheme base)
  #:use-module ((srfi srfi-26) #:select (cut))
  #:use-module ((syntax wrap) #:select (switch-s-expr
                                        wrapped-syntax.datum
                                        unwrap-library-name-part))
  #:use-module ((tools) #:select (λ external-rep builtin-syntax-list))
  #:use-module ((tools logging) #:select (log-error))
)

;* Look up a [library dependency](TODO: Link to help page describing search paths etc.)
;* and return all objects exported by that dependency,
;* for import into the compiling module.
;*
;* Parameters
;*   library-name: '[Wrapped syntax](wrapped-syntax) representing a library name.'
;*
;* Result
;*   List of [imports](https://webassembly.github.io/spec/core/text/modules.html#imports),
;*   or `#f` if the import set is invalid or the library cannot be found.
define lookup-all-imports(library-name)
  define name wrapped-syntax.datum(library-name)
  call/cc
    λ (bail)
      if list?(name)
        let ((module-name external-rep(map((cut unwrap-library-name-part <> bail) name))))
          list(
            `(import
               $*display
               ,substring(module-name 1 {string-length(module-name) - 1})
               "display"
               anyref))
        bail(log-error("Library name must be a list" wrapped-name))

;* Built-in syntax for import sets.
define import-set-syntax
  builtin-syntax-list
    only
    except
    prefix
    rename

;* Look up a [library dependency](TODO: Link to help page describing search paths etc.)
;* and return the objects exported by that dependency
;* that are selected for import into the compiling module.
;*
;* Parameters
;*   import-set: '[Wrapped syntax](wrapped-syntax) representing an import set.'
;*
;* Result
;*   List of [imports](https://webassembly.github.io/spec/core/text/modules.html#imports),
;*   or `#f` if the import set is invalid or the library cannot be found.
define lookup-imports(import-set)
  switch-s-expr import-set head tail import-set-syntax
    'only
      'TODO
    'except
      'TODO
    'prefix
      'TODO
    'rename
      'TODO
    OTHER
      lookup-all-imports(import-set)
    UNBOUND
      lookup-all-imports(import-set)
    ATOM
      ;; Import sets are not always syntactic s-expressions; they can start with a number.
      lookup-all-imports(import-set)
    (THEN)  ;; Use an empty THEN block to return the value of the switch case.
