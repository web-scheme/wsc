;;* High-level API for transforming wrapped Scheme syntax
;;* into compiled WASM component modules.
(define-module (compile module)
  #:export (add-import
            add-global
            compile-modules
            component-module.core-modules
            component-module.core-instances
            component-module.core-types
            component-module.components
            component-module.instances
            component-module.aliases
            component-module.types
            component-module.start
            component-module.imports
            component-module.exports
            core-module
            core-module:new
            new-core-module
            new-component-module)
  #:use-module (scheme base)
  #:use-module ((compile function) #:select (compile-call))
  #:use-module ((compile import) #:select (compile-import))
  #:use-module ((compile library) #:select (compile-define-library))
  #:use-module ((parse wrap) #:select (unwrap-symbol
                                       switch-s-expr
                                       wrapped-syntax.datum))
  #:use-module ((tools logging) #:select (log-error))
)

;* An abstract Wasm core module.
;* Each field is a module section;
;* generally a list of Scheme data representing module-level Wasm instructions in
;* [text format](https://webassembly.github.io/spec/core/text/index.html).
define-record-type core-module
  core-module:new(types imports functions tables memories globals exports start elements data)
  core-module?
  ;* List of [types](https://webassembly.github.io/spec/core/text/types.html).
  types core-module.types core-module.set-types!
  ;* List of [imports](https://webassembly.github.io/spec/core/text/modules.html#imports).
  imports core-module.imports core-module.set-imports!
  ;* List of [functions](https://webassembly.github.io/spec/core/text/modules.html#functions).
  functions core-module.functions core-module.set-functions!
  ;* List of [tables](https://webassembly.github.io/spec/core/text/modules.html#tables).
  tables core-module.tables core-module.set-tables!
  ;* List of [memories](https://webassembly.github.io/spec/core/text/modules.html#memories).
  memories core-module.memories core-module.set-memories!
  ;* List of [globals](https://webassembly.github.io/spec/core/text/modules.html#globals).
  globals core-module.globals core-module.set-globals!
  ;* List of [exports](https://webassembly.github.io/spec/core/text/modules.html#exports).
  exports core-module.exports core-module.set-exports!
  ;* [Start function](https://webassembly.github.io/spec/core/text/modules.html#start-function) ID
  ;* or null.
  start core-module.start core-module.set-start!
  ;* List of [elements](https://webassembly.github.io/spec/core/text/modules.html#element-segments).
  elements core-module.elements core-module.set-elements!
  ;* List of [data](https://webassembly.github.io/spec/core/text/modules.html#data-segments).
  data core-module.data core-module.set-data!

;; TODO: Update with better links / docs once components are standardized.
;* An abstract Wasm component module.
;* See https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md.
define-record-type component-module
  component-module:new(core-modules core-instances core-types components instances aliases types start imports exports)
  component-module?
  ;* List of [core modules](core-module).
  core-modules component-module.core-modules component-module.set-core-modules!
  ;* List of [core instances](TODO).
  core-instances component-module.core-instances component-module.set-core-instances!
  ;* List of [core types](TODO).
  core-types component-module.core-types component-module.set-core-types!
  ;* List of child [components](component-module).
  components component-module.components component-module.set-components!
  ;* List of component [instances](TODO).
  instances component-module.instances component-module.set-instances!
  ;* List of [aliases](TODO).
  aliases component-module.aliases component-module.set-aliases!
  ;* List of component [types](TODO).
  types component-module.types component-module.set-types!
  ;* [Start function](TODO) ID
  ;* or null.
  start component-module.start component-module.set-start!
  ;* List of component [imports](TODO).
  imports component-module.imports component-module.set-imports!
  ;* List of component [exports](TODO).
  exports component-module.exports component-module.set-exports!

;* Return a new, empty [core module](core-module).
define new-core-module()
  core-module:new('() '() '() '() '() '() '() '() '() '())

;* Return a new, empty [component module](component-module).
define new-component-module()
  component-module:new('() '() '() '() '() '() '() '() '() '())

define add-import(module import)
  component-module.set-imports!(
    module
    cons(import component-module.imports(module)))

define add-global(module global)
  component-module.set-globals!(
    module
    cons(global component-module.globals(module)))

;* Compile a list of top-level syntax into the given main module and companion modules.
;*
;* Parameters
;*   wrapped-data:   List of [wrapped syntax](wrapped-syntax) objects.
;*   main-module:    Main [component module](component-module) in which to compile all syntax
;*                   besides library definitions.
;*   other-modules:  List of [Component modules](component-module)
;*                   from previously-compiled library definitions.
;*
;* Result
;*   A list of at least 1 [component modules](component-module),
;*   where the first module is the main module,
;*   or `#f` if any syntax fails semantic validation.
define compile-top-level(wrapped-data main-module other-modules)
  if null?(wrapped-data)
    cons(main-module other-modules)
    let ((syntax      car(wrapped-data))
         (syntax-rest cdr(wrapped-data)))
      switch-s-expr syntax head tail '()
        'import
          compile-top-level(syntax-rest
                            (if null?(tail)
                              (begin
                                log-error("Empty import" syntax)
                                main-module)
                              (compile-import tail main-module))
                            other-modules)
        'define
          compile-top-level(syntax-rest
                            (if null?(tail)
                              (begin
                                log-error("Empty definition" syntax)
                                main-module)
                              compile-define(tail main-module))
                            other-modules)
        'define-library
          compile-top-level(syntax-rest
                            main-module
                            (if null?(tail)
                              (begin
                                log-error("Empty library definition" syntax)
                                other-modules)
                              cons(compile-define-library(tail) other-modules)))
        'define-syntax
          if null?(tail)
            log-error("Empty syntax definition" syntax)
            compile-define-syntax(tail)
          compile-top-level(syntax-rest main-module other-modules)
        OTHER
          ; A top-level function invocation belongs in the module's start function.
          compile-call(syntax component-module.start(main-module))
          compile-top-level(syntax-rest main-module other-modules)
        UNBOUND
          log-error("Unbound variable" car(wrapped-syntax.datum(syntax)))
          compile-top-level(syntax-rest main-module other-modules)
        ATOM
          let ((resolved unwrap-symbol(syntax)))
            ;; It's a symbol. Check if it's an unbound reference.
            when resolved
              'TODO
          ;; Atomic expressions can be ignored at the top level.
          compile-top-level(syntax-rest main-module other-modules)
        (THEN)

;* Compile a list of top-level syntax.
;*
;* Parameters
;*   wrapped-data:  List of [wrapped syntax](wrapped-syntax) objects.
;*
;* Result
;*   List of [modules](component-module),
;*   where the head of the list is an executable module
;*   comprised of the Scheme code not enclosed in a library,
;*   and any subsequent modules are importable libraries.
define compile-modules(wrapped-data)
  compile-top-level(wrapped-data new-component-module() '())
