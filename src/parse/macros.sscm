;;* Macro definition and expansion
(define-module (parse macros)
  #:export (process-all-macros)
  #:use-module (scheme base)
  #:use-module (srfi srfi-26)  ; `cut` / `cute`
  #:use-module (srfi srfi-69)  ; Basic hash tables.
  #:use-module (ice-9 match)   ; [https://srfi.schemers.org/srfi-200/srfi-200.html]
  #:use-module ((parse env)     #:select (bind-syntax! lookup-syntax))
  #:use-module ((parse reading) #:select (wrapped-syntax
                                          wrapped-syntax.datum
                                          wrapped-syntax.set-datum!
                                          wrapped-syntax.env
                                          unwrap-syntax
                                          fake-wrap))
  #:use-module ((tools)         #:select (位 map-improper))
  #:use-module ((tools logging) #:select (log-debug log-error log-fatal))
)

;;* Representation of a macro transformer.
define-record-type transformer
  transformer:new(ellipsis literals rules)
  transformer?
  ;;* Identifier for ellipses.
  ellipsis  transformer.ellipsis
  ;;* List of identifiers for literals.
  literals  transformer.literals
  ;;* List of rules, each a pair of the form `(pattern . template)`.
  rules     transformer.rules

;;* Check for errors and simplify a single macro rule.
;;*
;;* Parameters:
;;*   wrapped-rule:  A single syntax rule, as a [wrapped-syntax] object.
;;*
;;* Result:
;;*   The same rule recursively unwrapped and converted from a doubleton list to a pair.
define unwrap-macro-rule(wrapped-rule)
  match wrapped-rule
    ($ wrapped-syntax (wrapped-pattern wrapped-template))
      cons(unwrap-syntax(wrapped-pattern)
           unwrap-syntax(wrapped-template))
    _
      ;; TODO: Should raise syntax-error.
      log-fatal("Invalid macro definition" wrapped-datum)

;;* Check for errors and define a macro.
;;*
;;* Parameters:
;;*   wrapped-datum:  Overall syntax definition code, as a [wrapped-syntax] object.
;;*   env:            Environment to define the macro in.
;;*   tail:           Tail of [wrapped-syntax] objects following `define-syntax`.
;;*
;;* Result:
;;*   The same rule recursively unwrapped and converted from a doubleton list to a pair.
define define-macro(wrapped-datum env tail)
  log-debug("Defining macro" wrapped-datum)
  match tail
    (($ wrapped-syntax (? symbol? name))
     ($ wrapped-syntax
       (($ wrapped-syntax (? (cut eq? <> 'syntax-rules)))
        ($ wrapped-syntax (($ wrapped-syntax (? symbol? literals)) ...))
        wrapped-rules ...)))
      bind-syntax!(env name
                   transformer:new('...
                                   literals
                                   map(unwrap-macro-rule
                                       wrapped-rules)))
    (($ wrapped-syntax (? symbol? name))
     ($ wrapped-syntax
       (($ wrapped-syntax (? (cut eq? <> 'syntax-rules)))
        ($ wrapped-syntax (? symbol? ellipsis))
        ($ wrapped-syntax (($ wrapped-syntax (? symbol? literals)) ...))
        wrapped-rules ...)))
      bind-syntax!(env name
                   transformer:new(ellipsis
                                   literals
                                   map(unwrap-macro-rule
                                       wrapped-rules)))
    _
      ;; TODO: Should raise syntax-error.
      log-fatal("Invalid macro definition" wrapped-datum)
  wrapped-datum

;; This should all be defined in SRFI 125:
define hash-table-empty?(hash-table)
  {hash-table-size(hash-table) = 0}
define hash-table-contains? hash-table-exists?
define hash-table-for-each(proc hash-table)
  hash-table-walk(hash-table proc)
define hash-table-map!(proc hash-table)
  define aux(keys)
    unless null?(keys)
      let ((key car(keys)))
        hash-table-update!(hash-table key (cut proc key <>))
        aux(cdr(keys))
  aux(hash-table-keys(hash-table))
define hash-table-copy(hash-table . mutable?)
  alist->hash-table(hash-table->alist(hash-table))
define hash-table-prune!(proc hash-table)
  define aux(keys)
    unless null?(keys)
      let ((key car(keys)))
        if proc(key hash-table-ref(hash-table key))
          hash-table-delete!(hash-table key)
        aux(cdr(keys))
  aux(hash-table-keys(hash-table))

define encapsulate-bindings!(bindings)
  if not(bindings)
    #f  ; Fail fast.
    begin
      hash-table-map!
        (位 (key value) list(value))
        bindings
      bindings

define append-bindings!(prior next)
  if {not(prior) or not(next)}
    #f  ; Fail fast.
    if null?(prior)
      next   ; When `prior` is null, treat it like an empty binding set.
      begin
        hash-table-for-each
          位 (key value)
            hash-table-update!/default(prior key (cut append <> value) '())
          next
        prior

define merge-bindings!(prior next)
  if {not(prior) or not(next)}
    #f  ; Fail fast.
    begin
      ;; TODO: Replace with `hash-table-union!` (SRFI 125).
      hash-table-for-each
        (位 (key value) hash-table-set!(prior key value))
        next
      prior

;;* Attempt to match a single syntax rule pattern.
;;*
;;* Parameters:
;;*   ellipsis:    Ellipsis symbol, usually `...`.
;;*   literals:    List of literal symbols in the syntax rule patterns.
;;*   pattern:     Pattern to match.
;;*   expression:  Expression to match against.
;;*
;;* Result:
;;*   A nested association list of the free-variable bindings introduced during matching,
;;*   or `#f` if the pattern failed to match.
define syntax-rule-match(ellipsis literals pattern expression)
  ;; TODO: Handle overlap between literals, ellipsis and the underscore.
  ;;       Currently, ellipsis takes precedence, then literals, then underscore.
  ;; TODO: Handle `(... ...)` pattern.
  define recurse(pattern expression ellipsis-bindings)
    if pair?(pattern)
      if pair?(expression)
        let ((bindings recurse(car(pattern) car(expression) '())))
          if bindings
            let ((pattern-tail cdr(pattern))
                 (expression-tail cdr(expression)))
              if pair?(pattern-tail)
                if eq?(car(pattern-tail) ellipsis)
                  if {length(pattern-tail) > length(expression-tail)}
                    ;; Exhausted all possible variable (ellipsis) bindings.
                    merge-bindings!
                      append-bindings!
                        ellipsis-bindings
                        encapsulate-bindings!(bindings)
                      recurse(cdr(pattern-tail) expression-tail '())
                    ;; Still processing bindings for this ellipsis.
                    recurse
                      pattern
                      expression-tail
                      append-bindings!
                        ellipsis-bindings
                        encapsulate-bindings!(bindings)
                  ;; Pattern is not followed by an ellipsis.
                  merge-bindings!(bindings recurse(pattern-tail expression-tail '()))
                ;; Pattern is an improper list or null.
                merge-bindings!(bindings recurse(pattern-tail expression-tail '()))
            #f  ; Short circuit when the recursion fails.
        if and(null?(expression)
               pair?(cdr(pattern))
               eq?(cadr(pattern) ellipsis))
          recurse(cddr(pattern) expression '())
          #f
      if memq(pattern literals)  ; TODO: Should this be `member` instead of `memq`?
        if eq?(pattern expression)
          make-hash-table()  ; Literals do not create bindings; return empty.
          #f                 ; If a literal does not match, the pattern does not match.
        if symbol?(pattern)
          if eq?(pattern '_)
            make-hash-table()                                  ; Underscore does not create bindings.
            alist->hash-table(list(cons(pattern expression)))  ; A pattern variable always matches.
          if {vector?(pattern) and vector?(expression)}
            recurse(vector->list(pattern) vector->list(expression) '())
            if equal?(pattern expression)  ; TODO: Check that `pattern` is "constant" (as in report).
              make-hash-table()
              #f
  ;; Assume that the pattern and expression are both lists with the same `car`
  ;; (the macro keyword).
  recurse(cdr(pattern) cdr(expression) '())

;;* Extract the names of all macro free-variables appearing in `template`.
;;*
;;* Parameters:
;;*   template:  Syntax rule template.
;;*   bindings:  Hash map of identifiers to bound data, as returned by [syntax-rule-match].
;;*
;;* Result:
;;*   List of identifiers in `bindings` that appear in `template`,
;;*   each appearing in the result as many times as in `template`.
define extract-variables(template bindings)
  define aux(template variables)
    if pair?(template)
      aux(cdr(template) aux(car(template) variables))
      if vector?(template)
        aux(vector->list(template) variables)
        if hash-table-contains?(bindings template)
          cons(template variables)
          variables
  aux(template '())

;;* Remove the first repeated value from the binding for each key.
;;* It's an error if any of the bindings for `keys` are not repeated.
;;*
;;* Parameters:
;;*   bindings:  Hash map of identifiers to bound data, as returned by [syntax-rule-match].
;;*   keys:      List of identifiers, as returned by [extract-variables].
;;*
;;* Result:
;;*   The "stripped" bindings, which are non-repeated.
define strip-repeat-bindings!(bindings keys)
  define aux(keys next-strip)
    if null?(keys)
      next-strip
      let* ((key car(keys))
            (value hash-table-ref/default(bindings key '())))
        if list?(value)
          if null?(value)
            #f  ; Ellipsis exhausted.
            begin
              hash-table-set!(next-strip key car(value))
              hash-table-set!(bindings key cdr(value))
              aux(cdr(keys) next-strip)
          begin
            log-error("Expected key to be repeated but wasn't")
            raise "Expected key to be repeated but wasn't"  ; TODO: Clean up error handling.
  if null?(keys)
    #f  ; Why is this necessary to handle unused repeated variables?
    aux(keys make-hash-table())

;;* Put back the unused repeated values previously removed by [strip-repeat-bindings!].
;;* They may be used in a proceeding binding.
define unstrip-leftovers!(bindings strip)
  hash-table-for-each
    位 (key value)
      hash-table-update!/default(bindings key (cut cons value <>) '())
    strip
  bindings

;;* Expand a matched template with the given bindings.
;;*
;;* Parameters:
;;*   ellipsis:  Ellipsis symbol, usually `...`.
;;*   template:  Syntax rule template that matched.
;;*   bindings:  Hash map of identifiers to bound data, as returned by [syntax-rule-match].
;;*
;;* Result:
;;*   The newly expanded datum, as a [wrapped-syntax] object.
define syntax-rule-expand(ellipsis template bindings)
  ;; HF for easier recursion:
  define aux(template bindings)
    if hash-table-contains?(bindings template)
      ;; The template is just a bound variable identifer.
      let ((value hash-table-ref(bindings template)))
        hash-table-delete!(bindings template)
        value
      if pair?(template)
        let ((template-head car(template))
             (template-tail cdr(template)))
          if {pair?(template-tail) and eq?(car(template-tail) ellipsis)}
            let ((sub-bindings
                  strip-repeat-bindings!(bindings extract-variables(template-head bindings))))
              if sub-bindings
                ;; Yes more repeat bindings.
                begin
                  cons(aux(template-head sub-bindings)
                       aux(template unstrip-leftovers!(bindings sub-bindings)))
                ;; No more repeat bindings to apply; the ellipsis is exhausted.
                begin
                  hash-table-prune!
                    (位 (key value) null?(value))
                    bindings
                  aux(cdr(template-tail) bindings)
            ;; Non-repeated pattern.
            cons(aux(car(template) bindings) aux(cdr(template) bindings))
        if vector?(template)
          list->vector(aux(vector->list(template) bindings))
          template
  aux(template bindings)

;; TODO: Document.
define expand-macro(wrapped-datum transformer)
  define datum unwrap-syntax(wrapped-datum)
  define ellipsis transformer.ellipsis(transformer)
  define literals transformer.literals(transformer)
  define try-rules(rules)
    if null?(rules)
      begin
        log-error("Failed to expand macro: no matching patterns" wrapped-datum)
        wrapped-datum
      let* ((next-rule car(rules))
            (match-bindings syntax-rule-match(ellipsis literals car(next-rule) datum)))
        if match-bindings
          ;; TODO: Process macros as real wrapped syntax,
          ;;       instead of just fake-wrapping the expanded datum here.
          let ((expanded fake-wrap(syntax-rule-expand(ellipsis cdr(next-rule) match-bindings)
                                   '()
                                   "<expanded>")))
            log-debug("Macro expanded." expanded)
            expanded
          try-rules(cdr(rules))
  log-debug("Expanding macro" wrapped-datum)
  try-rules(transformer.rules(transformer))

;;* Recursively record all macro definitions and expand all macro instances
;;* until no further expansion is possible.
;;*
;;* Parameters:
;;*   wrapped-datum:  [wrapped-syntax] representing the Scheme code to expand.
;;*
;;* Result:
;;*   Expanded version of `wrapped-datum`.
define process-all-macros(wrapped-datum)
  define datum wrapped-syntax.datum(wrapped-datum)
  match datum
    (($ wrapped-syntax (? symbol? name)) . tail)
      ;; `datum` has the unwrapped form `(name . tail)` where `name` is an identifier.
      ;; Check to see if the `name` is a macro keyword.
      let* ((env           wrapped-syntax.env(wrapped-datum))
            (maybe-syntax  lookup-syntax(env name)))
        ;; `maybe-syntax` is either a [transformer] object (user macro),
        ;; a symbol (built-in syntax), or `#f` (not syntax but function invocation).
        if transformer?(maybe-syntax)
          expand-macro(wrapped-datum maybe-syntax)
          if eq?(maybe-syntax 'define-syntax)
            define-macro(wrapped-datum env tail)
            begin
              ;; Don't "expand" normal function calls or built-in syntax besides `define-syntax`,
              ;; but recursively try to expand their parameters.
              if {pair?(tail) or null?(tail)}
                set-cdr!(datum map-improper(process-all-macros tail))
                set-cdr!(datum process-all-macros(tail))
              wrapped-datum
    (? pair?)
      ;; `datum` is any other pair.
      ;; Nothing to expand at this level. Recurse.
      wrapped-syntax.set-datum!(wrapped-datum
                                map-improper(process-all-macros datum))
      wrapped-datum
    (? vector?)
      ;; `datum` is any vector.
      ;; Nothing to expand at this level. Recurse.
      wrapped-syntax.set-datum!(wrapped-datum
                                vector-map(process-all-macros datum))
      wrapped-datum
    _
      ;; `datum` is an atom. It's already fully expanded.
      wrapped-datum
