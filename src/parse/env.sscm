;;* Tools for manipulating lexical environments.
(define-module (parse env)
  #:export (make-env
            bind-value!
            rebind-variable!
            lookup-syntax
            bind-syntax!)
  #:use-module (scheme base)
  #:use-module ((parse reading) #:select (wrapped-syntax.datum))
  #:use-module ((tools logging) #:select (log-warning))
)

;;* Lexical environment implementation type.
define-record-type env
  env:new(bindings parent)
  env?
  bindings env.bindings  ;* Association list of identifiers to binding objects.
  parent env.parent      ;* The parent environment.

;;* A binding object in a lexical environment.
define-record-type binding
  binding:new(is-syntax? value)
  binding?
  ;;* If true, this is a syntax binding. Otherwise, it's a variable binding.
  is-syntax? binding.is-syntax?
  ;;* Transformer for syntax bindings, boxed value for variables.
  value binding.value

;;* Create a new, empty lexical environment with the given parent.
;;*
;;* Parameters:
;;*   parent:  The parent lexical environment.
;;*
;;* Result:
;;*   The new child environment.
define make-env(parent)
  env:new('() parent)

;;* Create a binding to a new location, storing `value` in that location.
;;*
;;* Parameters:
;;*   env:    Lexical environment in which to create the binding.
;;*   id:     Identifier (name) for the new binding.
;;*   value:  Value to store in the location of the binding.
define bind-value!(env id value)
  display("Not yet implemented")

;;* Create a binding to an existing location.
;;*
;;* Parameters:
;;*   dest-env:  Lexical environment in which to create the binding.
;;*   dest-id:   Identifier (name) for the new binding in `dest-env`.
;;*   src-env:   Lexical environment of the existing location.
;;*   src-id:    Identifier (name) bound to the existing location in `src-env`.
define rebind-variable!(dest-env dest-id src-env src-id)
  display("Not yet implemented")

;;* Create a new syntax binding.
;;*
;;* Parameters:
;;*   env:          Lexical environment in which to create the binding.
;;*   wrapped-id:   Identifier (name) for the new binding,
;;*                 as a wrapped syntax object.
;;*   transformer:  Transformer for the syntax.
define bind-syntax!(env wrapped-id transformer)
  define id wrapped-syntax.datum(wrapped-id)
  define existing-binding assq(id env.bindings(env))
  when existing-binding
    log-warning("Re-binding existing identifier" wrapped-id)
  env.set-bindings!(
    env
    cons(cons(id transformer)
         env.bindings(env)))

;;* Look for an existing macro (syntax binding) by keyword.
;;*
;;* Parameters:
;;*   env:  Lexical environment currently in scope.
;;*   id:   Identifier found in head position.
;;*
;;* Result:
;;*   The current binding in scope for `id`, or `#f` if none found.
define lookup-binding(env id)
  if null?(env)
    #f  ; Terminate after the root environment.
    let ((binding assq(id env.bindings(env))))
      if binding
        binding
        lookup-syntax(env.parent(env) id)

;;* Look for an existing macro (syntax binding) by keyword.
;;*
;;* Parameters:
;;*   env:  Lexical environment currently in scope.
;;*   id:   Identifier found in head position.
;;*
;;* Result:
;;*   The current syntax transformer in scope for `id`,
;;*   or `#f` if none found.
define lookup-syntax(env id)
  define binding lookup-binding(env id)
  ;; Variable bindings can overshadow syntax.
  and binding
      binding.is-syntax?(binding)
      binding.value(binding)
