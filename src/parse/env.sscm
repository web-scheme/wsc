;;* Tools for manipulating lexical environments.
(define-module (parse env)
  #:export (env
            env-new
            env.bindings
            make-env
            bind-value!
            rebind-variable!
            lookup-syntax
            lookup-variable-or-builtin
            bind-syntax!)
  #:use-module (scheme base)
  #:use-module ((parse macros) #:select (transformer transformer?))
  #:use-module ((tools logging) #:select (log-warning))
)

;* Lexical environment implementation type.
define-record-type env
  env:new(bindings parent)
  env?
  ;* Association list of [identifiers](symbol) to either:
  ;* - [symbols](symbol) for built-in syntax
  ;* - [transformers](transformer) for user macros
  ;* - [variable references](location) for variable bindings (inlcuding functions)
  bindings env.bindings env.set-bindings!
  ;* The parent environment.
  parent env.parent

;* Reference to a variable.
define-record-type location
  location:new()
  location?

;* Create a new, empty lexical environment with the given parent.
;*
;* Parameters
;*   parent:  Parent [lexical environment](env).
;*
;* Result
;*   The new child [environment](env).
define make-env(parent)
  env:new('() parent)

;* Create a binding to a new location, storing `value` in that location.
;*
;* Parameters
;*   env:   '[Environment](env) in which to create the binding.'
;*   id:    '[Identifier](symbol) for the new binding.'
;*   value:  Value to store in the location of the binding.
define bind-value!(env id value)
  ;; TODO: Make sure callers check and warn on re-definition.
  display("Not yet implemented")

;* Create a binding to an existing location.
;*
;* Parameters
;*   dest-env: '[Environment](env) in which to create the binding.'
;*   dest-id:  '[Identifier](symbol) for the new binding in `dest-env`.'
;*   src-env:  '[Environment](env) of the existing location.'
;*   src-id:   '[Identifier](symbol) bound to the existing location in `src-env`.'
define rebind-variable!(dest-env dest-id src-env src-id)
  display("Not yet implemented")

;* Create a new user syntax binding.
;*
;* Parameters
;*   env:         '[Lexical environment](env) in which to create the binding.'
;*   id:          '[Identifier](symbol) for the new binding.'
;*   transformer: '[Transformer](transformer) for the syntax.'
define bind-syntax!(env id transformer)
  ;; TODO: Make sure callers check and warn on re-definition.
  env.set-bindings!(
    env
    cons(cons(id transformer)
         env.bindings(env)))

;* Look for an existing [binding] by keyword.
;*
;* Parameters
;*   env: '[Lexical environment](env) currently in scope.'
;*   id:  '[Identifier](symbol) found in head position.'
;*
;* Result
;*   The current [binding] in scope for `id`,
;*   or `#f` if none found.
define lookup-binding(env id)
  if null?(env)
    #f  ; Terminate after the root environment.
    let ((pair assq(id env.bindings(env))))
      if pair
        cdr(pair)
        lookup-binding(env.parent(env) id)

;* Look for an existing macro (syntax binding) by keyword.
;*
;* Parameters
;*   env: '[Lexical environment](env) currently in scope.'
;*   id:  '[Identifier](symbol) found in head position.'
;*
;* Result
;*   The current [syntax transformer](transformer) in scope for `id` if it's a user macro,
;*   an [identifier](symbol) if it's built-in syntax,
;*   or `#f` when none found or eclipsed by a variable.
define lookup-syntax(env id)
  define binding lookup-binding(env id)
  and (or symbol?(binding) transformer?(binding))
      binding

;* Look for an existing variable binding or built-in syntax binding.
;*
;* Parameters
;*   env: '[Lexical environment](env) currently in scope.'
;*   id:  '[Identifier](symbol) found in head position.'
;*
;* Result
;*   The current [variable reference](location) in scope for `id` if it's a variable,
;*   an [identifier](symbol) if built-in syntax,
;*   or `#f` when none found or eclipsed by a user macro.
define lookup-variable-or-builtin(env id)
  define binding lookup-binding(env id)
  and (or symbol?(binding) location?(binding))
      binding

;; TODO: Remove after bootstrapping.
;* Crutch because Guile is unable to export constructors directly.
define env-new(a b)
  env:new(a b)
