;;* Serialize compiled WASM modules in text format.
(define-module (emit text)
  #:export (emit-text)
  #:use-module (scheme base)
  #:use-module ((compile module) #:select (component-module.core-modules
                                           component-module.core-instances
                                           component-module.core-types
                                           component-module.components
                                           component-module.instances
                                           component-module.aliases
                                           component-module.types
                                           component-module.start
                                           component-module.imports
                                           component-module.exports))
  #:use-module ((tools logging) #:select (log-error))
)

define emit-core-module(core-module)
  'TODO

define emit-core-instance(core-instance)
  'TODO

define emit-core-type(core-type)
  'TODO

define emit-component(component)
  'TODO

define emit-instance(instance)
  'TODO

define emit-alias(alias)
  'TODO

define emit-type(type)
  'TODO

define emit-start(start)
  'TODO

define emit-import(import)
  import

define emit-export(export)
  export

define map-and-prepend!(proc objs tail)
  define mutate-next!(pair)
    set-car!(pair proc(car(pair)))
    if null?(cdr(pair))
      set-cdr!(pair tail)
      mutate-next!(cdr(pair))
  if null?(objs)
    tail
    begin
      mutate-next!(objs)
      objs

define-syntax chain-map-and-prepend!
  syntax-rules ()
    (chain-map-and-prepend! (objs . proc) next rest ...)
      map-and-prepend!(
        proc objs
        (chain-map-and-prepend! next rest ...))
    (chain-map-and-prepend! (objs . proc))
      map-and-prepend!(proc objs '())

;* Serialize a compiled WASM module in text format.
;*
;* Parameters
;*   module: [Component module](component-module).
;*
;* Result
;*   A literal s-expression representing the serialized module.
;*   It can be written to file using the standard [write] procedure.
define emit-text(module)
  cons
    'component
    chain-map-and-prepend!
      component-module.core-modules(module) . emit-core-module
      component-module.instances(module)    . emit-core-instance
      component-module.types(module)        . emit-core-type
      component-module.components(module)   . emit-component
      component-module.instances(module)    . emit-instance
      component-module.aliases(module)      . emit-alias
      component-module.types(module)        . emit-type
      component-module.start(module)        . emit-start
      component-module.imports(module)      . emit-import
      component-module.exports(module)      . emit-export
