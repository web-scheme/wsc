;;* TODO
(define-module (compile)
  #:export (add-imports
            add-globals
            compile-modules
            new-empty-module
            wasm-module
            wasm-module:new)
  #:use-module (scheme base)
  #:use-module ((compile library) #:select (compile-define-library))
  #:use-module ((syntax wrap) #:select (unwrap-symbol
                                        switch-s-expr
                                        wrapped-syntax.datum))
  #:use-module ((tools logging) #:select (log-error))
)

;* An abstract Wasm module.
;* Each field is a module section;
;* generally a vector of Scheme data representing module-level Wasm instructions in
;* [text format](https://webassembly.github.io/spec/core/text/index.html).
define-record-type wasm-module
  wasm-module:new(types imports functions tables memories globals exports start elements data)
  wasm-module?
  ;* Vector of [types](https://webassembly.github.io/spec/core/text/types.html).
  types wasm-module.types wasm-module.set-types!
  ;* Vector of [imports](https://webassembly.github.io/spec/core/text/modules.html#imports).
  imports wasm-module.imports wasm-module.set-imports!
  ;* Vector of [functions](https://webassembly.github.io/spec/core/text/modules.html#functions).
  functions wasm-module.functions wasm-module.set-functions!
  ;* Vector of [tables](https://webassembly.github.io/spec/core/text/modules.html#tables).
  tables wasm-module.tables wasm-module.set-tables!
  ;* Vector of [memories](https://webassembly.github.io/spec/core/text/modules.html#memories).
  memories wasm-module.memories wasm-module.set-memories!
  ;* Vector of [globals](https://webassembly.github.io/spec/core/text/modules.html#globals).
  globals wasm-module.globals wasm-module.set-globals!
  ;* Vector of [exports](https://webassembly.github.io/spec/core/text/modules.html#exports).
  exports wasm-module.exports wasm-module.set-exports!
  ;* [Start function](https://webassembly.github.io/spec/core/text/modules.html#start-function) ID
  ;* or null.
  start wasm-module.start wasm-module.set-start!
  ;* Vector of [elements](https://webassembly.github.io/spec/core/text/modules.html#element-segments).
  elements wasm-module.elements wasm-module.set-elements!
  ;* Vector of [data](https://webassembly.github.io/spec/core/text/modules.html#data-segments).
  data wasm-module.data wasm-module.set-data!

;* Return a new, empty [module](wasm-module).
define new-empty-module()
  wasm-module:new(#() #() #() #() #() #() #() '() #() #())

;; TODO: Make sure to automatically inline the case
;;       where `add-imports` is called with a known number of parameters
;;       which are then passed to `apply`.
define add-imports(module . imports)
  ;; TODO: `vector-append` unnecessarily allocates a new vector.
  ;;       Optimize here and elsewhere.
  wasm-module.set-imports!(
    module
    vector-append(wasm-module.imports(module)
                  apply(vector imports)))

define add-globals(module . globals)
  wasm-module.set-globals!(
    module
    vector-append(wasm-module.globals(module)
                  apply(vector globals)))

;* Compile top-level syntax (a datum with no parent).
;*
;* Parameters
;*   syntax: '[wrapped syntax](wrapped-syntax) object'
;*
;* Result
;*   Either a [module](wasm-module),
;*   or a TODO
define compile-top-level(syntax)
  switch-s-expr syntax head tail '()
    'define
      if null?(tail)
        log-error("Empty definition" syntax)
        1  ; TODO
    'define-library
      if null?(tail)
        log-error("Empty library definition" syntax)
        compile-define-library(tail)
    'define-syntax
      if null?(tail)
        log-error("Empty syntax definition" syntax)
        3  ; TODO
    OTHER
      'TODO
    UNBOUND
      log-error("Unbound variable" car(wrapped-syntax.datum(syntax)))
    ATOM
      set! resolved unwrap-symbol(syntax)
      if resolved
        5  ; TODO
        6  ; TODO
    (THEN)

;* Compile a list of top-level syntax.
;*
;* Parameters
;*   wrapped-data:  List of [wrapped syntax](wrapped-syntax) objects.
;*
;* Result
;*   List of [modules](wasm-module),
;*   where the head of the list is an executable module
;*   comprised of the Scheme code not enclosed in a library,
;*   and any subsequent modules are importable libraries.
define compile-modules(wrapped-data)
  map(compile-top-level wrapped-data)
