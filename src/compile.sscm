;;* High-level API for transforming wrapped Scheme syntax
;;* into compiled WASM component modules.
(define-module (compile)
  #:export (add-imports
            add-globals
            compile-modules
            core-module
            core-module:new
            new-core-module
            new-component-module)
  #:use-module (scheme base)
  #:use-module ((compile library) #:select (compile-define-library))
  #:use-module ((syntax wrap) #:select (unwrap-symbol
                                        switch-s-expr
                                        wrapped-syntax.datum))
  #:use-module ((tools logging) #:select (log-error))
)

;* An abstract Wasm core module.
;* Each field is a module section;
;* generally a vector of Scheme data representing module-level Wasm instructions in
;* [text format](https://webassembly.github.io/spec/core/text/index.html).
define-record-type core-module
  core-module:new(types imports functions tables memories globals exports start elements data)
  core-module?
  ;* Vector of [types](https://webassembly.github.io/spec/core/text/types.html).
  types core-module.types core-module.set-types!
  ;* Vector of [imports](https://webassembly.github.io/spec/core/text/modules.html#imports).
  imports core-module.imports core-module.set-imports!
  ;* Vector of [functions](https://webassembly.github.io/spec/core/text/modules.html#functions).
  functions core-module.functions core-module.set-functions!
  ;* Vector of [tables](https://webassembly.github.io/spec/core/text/modules.html#tables).
  tables core-module.tables core-module.set-tables!
  ;* Vector of [memories](https://webassembly.github.io/spec/core/text/modules.html#memories).
  memories core-module.memories core-module.set-memories!
  ;* Vector of [globals](https://webassembly.github.io/spec/core/text/modules.html#globals).
  globals core-module.globals core-module.set-globals!
  ;* Vector of [exports](https://webassembly.github.io/spec/core/text/modules.html#exports).
  exports core-module.exports core-module.set-exports!
  ;* [Start function](https://webassembly.github.io/spec/core/text/modules.html#start-function) ID
  ;* or null.
  start core-module.start core-module.set-start!
  ;* Vector of [elements](https://webassembly.github.io/spec/core/text/modules.html#element-segments).
  elements core-module.elements core-module.set-elements!
  ;* Vector of [data](https://webassembly.github.io/spec/core/text/modules.html#data-segments).
  data core-module.data core-module.set-data!

;; TODO: Update with better links / docs once components are standardized.
;* An abstract Wasm component module.
;* See https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md.
define-record-type component-module
  component-module:new(core-modules core-instances core-types components instances aliases types start imports exports)
  component-module?
  ;* Vector of [core modules](core-module).
  core-modules component-module.core-modules component-module.set-core-modules!
  ;* Vector of [core instances](TODO).
  core-instances component-module.core-instances component-module.set-core-instances!
  ;* Vector of [core types](TODO).
  core-types component-module.core-types component-module.set-core-types!
  ;* Vector of child [components](component-module).
  components component-module.components component-module.set-components!
  ;* Vector of component [instances](TODO).
  instances component-module.instances component-module.set-instances!
  ;* Vector of [aliases](TODO).
  aliases component-module.aliases component-module.set-aliases!
  ;* Vector of component [types](TODO).
  types component-module.types component-module.set-types!
  ;* [Start function](TODO) ID
  ;* or null.
  start component-module.start component-module.set-start!
  ;* Vector of component [imports](TODO).
  imports component-module.imports component-module.set-imports!
  ;* Vector of component [exports](TODO).
  exports core-module.exports core-module.set-exports!

;* Return a new, empty [core module](core-module).
define new-core-module()
  core-module:new(#() #() #() #() #() #() #() '() #() #())

;* Return a new, empty [component module](component-module).
define new-component-module()
  component-module:new(#() #() #() #() #() #() #() '() #() #())

;; TODO: Make sure to automatically inline the case
;;       where `add-imports` is called with a known number of parameters
;;       which are then passed to `apply`.
define add-imports(module . imports)
  ;; TODO: `vector-append` unnecessarily allocates a new vector.
  ;;       Optimize here and elsewhere.
  core-module.set-imports!(
    module
    vector-append(core-module.imports(module)
                  apply(vector imports)))

define add-globals(module . globals)
  core-module.set-globals!(
    module
    vector-append(core-module.globals(module)
                  apply(vector globals)))

;* Compile top-level syntax (a datum with no parent).
;*
;* Parameters
;*   syntax: '[wrapped syntax](wrapped-syntax) object'
;*
;* Result
;*   Either a [module](core-module),
;*   or a TODO
define compile-top-level(syntax)
  switch-s-expr syntax head tail '()
    'define
      if null?(tail)
        log-error("Empty definition" syntax)
        1  ; TODO
    'define-library
      if null?(tail)
        log-error("Empty library definition" syntax)
        compile-define-library(tail)
    'define-syntax
      if null?(tail)
        log-error("Empty syntax definition" syntax)
        3  ; TODO
    OTHER
      'TODO
    UNBOUND
      log-error("Unbound variable" car(wrapped-syntax.datum(syntax)))
    ATOM
      set! resolved unwrap-symbol(syntax)
      if resolved
        5  ; TODO
        6  ; TODO
    (THEN)

;* Compile a list of top-level syntax.
;*
;* Parameters
;*   wrapped-data:  List of [wrapped syntax](wrapped-syntax) objects.
;*
;* Result
;*   List of [modules](core-module),
;*   where the head of the list is an executable module
;*   comprised of the Scheme code not enclosed in a library,
;*   and any subsequent modules are importable libraries.
define compile-modules(wrapped-data)
  map(compile-top-level wrapped-data)
