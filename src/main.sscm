use-modules (scheme base)
use-modules (ice-9 match)  ; [https://srfi.schemers.org/srfi-200/srfi-200.html]

;; Load relative modules.
add-to-load-path (dirname (current-filename))

use-modules
  (parse env) #:select (make-env bind-syntax!)
  (parse macros) #:select (process-all-macros)
  (parse reading) #:select (read-all-wrapped unwrap-syntax)
  (tools) #:select (λ)

;;* The global lexical environment that is the ancestor of all environments.
define root-env make-env('())

;; TODO: This should be done in the (scheme base) lib.
bind-syntax!(root-env 'define-syntax 'define-syntax)

;;* Compile Scheme code into a Wasm module.
;;*
;;* Parameters:
;;*   filename:  A human-readable name for `in-port`,
;;*              or null if reading from standard input.
;;*   in-port:   Textual input port to read Scheme code from.
;;*   out-port:  Output port to write the Wasm module to,
;;*              written in text format if the port is textual, otherwise binary.
define compile!(filename in-port out-port)
  newline()
  write(map((λ (datum) unwrap-syntax(process-all-macros(datum)))
            read-all-wrapped(in-port root-env filename)))
  newline()

;; Good enough for now.
define filename "../test/integration/basic/input.scm"
define in-port open-input-file(filename)
compile!(filename in-port current-output-port())
close-port(in-port)
