use-modules (scheme base)
use-modules (ice-9 match)  ; [https://srfi.schemers.org/srfi-200/srfi-200.html]

;; Load relative modules.
add-to-load-path (dirname (current-filename))

use-modules
  (compile module) #:select (compile-modules)
  (parse env) #:select (bind-syntax! make-env)
  (parse macros) #:select (process-all-macros)
  (parse reading) #:select (read-all-wrapped)

;;* The global lexical environment that is the ancestor of all environments.
define root-env make-env('())

;* Bind all built-in syntax.
;; TODO: This should be done in the (scheme base) lib.
bind-syntax!(root-env 'define         'define)
bind-syntax!(root-env 'define-library 'define-library)
bind-syntax!(root-env 'define-syntax  'define-syntax)
bind-syntax!(root-env 'display        'display)
bind-syntax!(root-env 'import         'import)

;;* Compile Scheme code into a Wasm module.
;;*
;;* Parameters:
;;*   filename:  A human-readable name for `in-port`,
;;*              or null if reading from standard input.
;;*   in-port:   Textual input port to read Scheme code from.
;;*   out-port:  Output port to write the Wasm module to,
;;*              written in text format if the port is textual, otherwise binary.
define compile!(filename in-port out-port)
  newline()
  ;; TODO: Come up with a sane way to produce output based on compiler flags
  write(
    compile-modules(
      map(process-all-macros
          read-all-wrapped(in-port root-env filename))))
  newline()




use-modules
  (parse wrap) #:select (wrapped-syntax:new wrapped-syntax? unwrap-all-syntax)
  (tools) #:select (Î» map-improper)

define test-wrap(datum)
  cond
    pair?(datum)    wrapped-syntax:new(
                      map-improper(test-wrap datum)
                      root-env "nom de fichier" 4 20 '())
    vector?(datum)  wrapped-syntax:new(
                      vector-map(test-wrap datum)
                      root-env "nom de fichier" 4 20 '())
    else            wrapped-syntax:new(
                      datum
                      root-env "nom de fichier" 4 20 '())

newline()
write(compile-modules(map(test-wrap (quote (
  (import (scheme base))
  (display "Bonjour, monde")
)))))
newline()
newline()
